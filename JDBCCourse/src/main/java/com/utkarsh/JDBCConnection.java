/* TODO:  Steps to connect to the database using JDBC:
        Step1 - import package
        Step2 - load and register your driver
        Step3 - create the connection
        Step4 - create the statement
        Step5 - process the results
        Step6 - close the connection
*/

package com.utkarsh;


import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import static java.lang.Class.forName;
import static java.sql.DriverManager.getConnection;

@Service //-> This tells Spring that this class is a service, which means it contains business logic and can be used by other parts of the application. It will be automatically detected and registered as a Spring bean. This marks a class as something that does work for your app, and Spring will manage it for you.
public class JDBCConnection{

    @Autowired //-> This tells Spring to inject the JDBCConnectionConfiguration bean into this class, so you can use its properties. This means Spring will automatically create and give you the needed object of JDBCConnectionConfiguration, so you donâ€™t have to use new to make it yourself.
    private JDBCConnectionConfiguration dbProps;

    @PostConstruct //-> This tells Spring to run the method right after everything is set up and ready, so you can do any final setup work.
        public void connect()
        {
            try{

                //Step3 - Create the Connection
                Connection con = DriverManager.getConnection(dbProps.getUrl(), dbProps.getUserName(), dbProps.getPassword());
                System.out.println("Connection established successfully!");

                // ================================================================================================================================================================================================================================

                //Step4 - Create the statement : This is not needed for just establishing a connection, but is used when you want to execute SQL queries.
                Statement st = con.createStatement();

                // ================================================================================================================================================================================================================================
                //Step5 - Process the results : This is also not needed for just establishing a connection, but is used when you want to execute SQL queries means you are trying to get the data.
                //Remember here we are only reading the data from CRUD operations. This is why executeQuery() method is used which fetches data from the database and returns it as a ResultSet object.
                ResultSet rs = st.executeQuery("SELECT * FROM student"); // ResultSet is a table of data representing a database result set, which is usually generated by executing a statement that queries the database.

                // If you want to print all the results of the query, you can use a while loop to iterate through the ResultSet.
                 while(rs.next()){ // .next = it will check first do we have next row if yes then shift to next row.
                     System.out.print(rs.getInt( 1 ) + " - ");
                        System.out.print(rs.getString( 2 ) + " - ");
                        System.out.println(rs.getString( 3 ));

                 }

                // ================================================================================================================================================================================================================================

                //Step6 -  Close the connection
                con.close();
                System.out.println("Connection closed successfully!");

            }
            catch(Exception e){
                e.printStackTrace();
            }

        }
}